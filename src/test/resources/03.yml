openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:9191
  description: Generated server url
paths:
  /api/v1/customer/{id}:
    get:
      tags:
      - customer-controller
      operationId: getCustomerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerDto'
    put:
      tags:
      - customer-controller
      operationId: updateCustomerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - customer-controller
      operationId: deleteCustomerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - customer-controller
      operationId: updateCustomerPatchById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/beer/{id}:
    get:
      tags:
      - beer-controller
      operationId: getBeerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BeerDto'
    put:
      tags:
      - beer-controller
      operationId: updateBeerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - beer-controller
      operationId: deleteBeerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - beer-controller
      operationId: updateBeerPatchId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/customer:
    get:
      tags:
      - customer-controller
      operationId: listCustomers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDto'
    post:
      tags:
      - customer-controller
      operationId: saveCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/beer:
    get:
      tags:
      - beer-controller
      operationId: listBeers
      parameters:
      - name: beerName
        in: query
        required: false
        schema:
          type: string
      - name: beerStyle
        in: query
        required: false
        schema:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
      - name: showInventory
        in: query
        required: false
        schema:
          type: boolean
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBeerDto'
    post:
      tags:
      - beer-controller
      operationId: saveBeer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    CustomerDto:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int32
        name:
          type: string
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
    BeerDto:
      required:
      - beerName
      - beerStyle
      - price
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int32
        beerName:
          type: string
        beerStyle:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
        upc:
          type: string
        price:
          type: number
        quantityOnHand:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
    PageBeerDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BeerDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
